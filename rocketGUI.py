# Form implementation generated from reading ui file 'rocketGUI.ui'
#
# Created by: PyQt6 UI code generator 6.1.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets, uic
from pyqtgraph import PlotWidget, plot
from PyQt6.QtCore import QTimer
import pyqtgraph as pg
import sys
import os


class MainWindow(QtWidgets.QMainWindow):

    def __init__(self, *args, **kwargs):
        super(MainWindow, self).__init__(*args, **kwargs)

        # Load the UI Page
        uic.loadUi('rocketGUI.ui', self)
        self.timer = QtCore.QElapsedTimer()
        # self.timer.setInterval(500)

    def real_time_plot(self):
        data = open('/Users/dharmikpatel/Downloads/launch_example.csv', 'r')
        data = data.readlines()[1:]
        data = [x.split(',') for x in data]
        self.timer.start()
        data_index = 0
        x_list = []
        altitude_list = []
        accel_x = []
        accel_y = []
        accel_z = []
        self.altitude.setTitle("Altitude vs Time", color="w", size="20pt")
        self.acceleration.setTitle("Acceleration (x:r, y:g, z:b) vs Time", color="w", size="20pt")

        while True:
            if self.timer.elapsed() % 500 == 0:
                try:
                    x = float(data[data_index][0])
                    altitude = float(data[data_index][1])
                    accelx = float(data[data_index][6])
                    accely = float(data[data_index][7])
                    accelz = float(data[data_index][8])
                except:
                    break
                x_list.append(x)
                accel_x.append(accelx)
                accel_y.append(accely)
                accel_z.append(accelz)
                altitude_list.append(altitude)
                self.altitude.plot(x_list, altitude_list)
                self.acceleration.plot(x_list, accel_x, pen='r')
                self.acceleration.plot(x_list, accel_y, pen='g')
                self.acceleration.plot(x_list, accel_z, pen='b')
                data_index += 1

                QtGui.QGuiApplication.processEvents()


def main():
    app = QtWidgets.QApplication(sys.argv)
    main = MainWindow()
    main.show()
    main.real_time_plot()
    sys.exit(app.exec())


if __name__ == '__main__':
    main()
